pipeline {
    agent any 

    environment {
        MONGODB_URI = credentials('USER_SERVICE_MONGODB_URI')
        JWT_SECRET = credentials('JWT_SECRET')
        PASSWORD_SALT = credentials('PASSWORD_SALT')
        DISCORD_WEBHOOK_URL = credentials('DISCORD_WEBHOOK_URL')
    }

    stages {
        stage('clear existing image and container') {
            steps {
                script {
                    sh "echo deleting existing image and container"
                    try {
                        sh "rm .env"
                        sh "docker kill user-service"
                        sh "docker rm user-service"
                        sh "docker rmi user-service"
                    } catch (Exception e) {
                        echo "No existing image or container to remove"
                    }
                }
            }
            post {
                failure {
                    script {
                        def committerName = sh(script: 'git log -1 --pretty=format:"%cn"', returnStdout: true).trim()
                        discordSend description: "Failed to clear existing image and container. Committer: ${committerName}", link: env.BUILD_URL, result: currentBuild.currentResult, title: JOB_NAME, webhookURL: "${DISCORD_WEBHOOK_URL}"
                    }
                }
            }
        }
        stage('build image') {
            steps {
                script {
                    echo "building image with mongo ${MONGODB_URI}"
                    sh "echo DATABASE_URL=${MONGODB_URI} >> .env"
                    sh "echo JWT_SECRET=${JWT_SECRET} >> .env"
                    sh "echo PASSWORD_SALT=${PASSWORD_SALT} >> .env"
                    sh "docker build -t user-service ."
                }
            }
            post {
                failure {
                    script {
                        def committerName = sh(script: 'git log -1 --pretty=format:"%cn"', returnStdout: true).trim()
                        discordSend description: "Failed to build image. Committer: ${committerName}", link: env.BUILD_URL, result: currentBuild.currentResult, title: JOB_NAME, webhookURL: "${DISCORD_WEBHOOK_URL}"
                    }
                }
            }
        }
        stage('deploy') {
            steps {
                script {
                    sh "docker run -d --name user-service -p 9013:3000 --restart unless-stopped user-service"
                }
            }
            post {
                success {
                    script {
                        def committerName = sh(script: 'git log -1 --pretty=format:"%cn"', returnStdout: true).trim()
                        discordSend description: "Deployed image successfully. Committer: ${committerName}", link: env.BUILD_URL, result: currentBuild.currentResult, title: JOB_NAME, webhookURL: "${DISCORD_WEBHOOK_URL}"
                    }
                }
                failure {
                    script {
                        def committerName = sh(script: 'git log -1 --pretty=format:"%cn"', returnStdout: true).trim()
                        discordSend description: "Failed to deploy image. Committer: ${committerName}", link: env.BUILD_URL, result: currentBuild.currentResult, title: JOB_NAME, webhookURL: "${DISCORD_WEBHOOK_URL}"
                    }
                }
            }
        }
    }
}

def dockerExec(command) {
    sh "docker exec ${CONTAINER_NAME} ${command}"
}
